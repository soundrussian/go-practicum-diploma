// Code generated by mockery v2.10.0. DO NOT EDIT.

package mock

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	model "github.com/soundrussian/go-practicum-diploma/model"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AcceptOrder provides a mock function with given fields: ctx, userID, orderID
func (_m *Storage) AcceptOrder(ctx context.Context, userID uint64, orderID string) (*model.Order, error) {
	ret := _m.Called(ctx, userID, orderID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) *model.Order); ok {
		r0 = rf(ctx, userID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, string) error); ok {
		r1 = rf(ctx, userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddAccrual provides a mock function with given fields: ctx, orderID, status, accrual
func (_m *Storage) AddAccrual(ctx context.Context, orderID string, status model.OrderStatus, accrual decimal.Decimal) error {
	ret := _m.Called(ctx, orderID, status, accrual)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.OrderStatus, decimal.Decimal) error); ok {
		r0 = rf(ctx, orderID, status, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Storage) Close() {
	_m.Called()
}

// CreateUser provides a mock function with given fields: ctx, login, password
func (_m *Storage) CreateUser(ctx context.Context, login string, password string) (*model.User, error) {
	ret := _m.Called(ctx, login, password)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUser provides a mock function with given fields: ctx, login
func (_m *Storage) FetchUser(ctx context.Context, login string) (*model.User, error) {
	ret := _m.Called(ctx, login)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersWithStatus provides a mock function with given fields: ctx, status, limit
func (_m *Storage) OrdersWithStatus(ctx context.Context, status model.OrderStatus, limit int) ([]string, error) {
	ret := _m.Called(ctx, status, limit)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderStatus, int) []string); ok {
		r0 = rf(ctx, status, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.OrderStatus, int) error); ok {
		r1 = rf(ctx, status, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: ctx, orderID, status
func (_m *Storage) UpdateOrderStatus(ctx context.Context, orderID string, status model.OrderStatus) error {
	ret := _m.Called(ctx, orderID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.OrderStatus) error); ok {
		r0 = rf(ctx, orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserBalance provides a mock function with given fields: ctx, userID
func (_m *Storage) UserBalance(ctx context.Context, userID uint64) (*model.UserBalance, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.UserBalance
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.UserBalance); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserBalance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserOrders provides a mock function with given fields: ctx, userID
func (_m *Storage) UserOrders(ctx context.Context, userID uint64) ([]model.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.Order
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []model.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserWithdrawals provides a mock function with given fields: ctx, userID
func (_m *Storage) UserWithdrawals(ctx context.Context, userID uint64) ([]model.Withdrawal, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.Withdrawal
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []model.Withdrawal); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Withdrawal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Withdraw provides a mock function with given fields: ctx, userID, withdrawal
func (_m *Storage) Withdraw(ctx context.Context, userID uint64, withdrawal model.Withdrawal) (*model.Withdrawal, error) {
	ret := _m.Called(ctx, userID, withdrawal)

	var r0 *model.Withdrawal
	if rf, ok := ret.Get(0).(func(context.Context, uint64, model.Withdrawal) *model.Withdrawal); ok {
		r0 = rf(ctx, userID, withdrawal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Withdrawal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, model.Withdrawal) error); ok {
		r1 = rf(ctx, userID, withdrawal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
